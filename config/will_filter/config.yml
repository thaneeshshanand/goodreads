#--
# Copyright (c) 2010-2016 Michael Berkovich, theiceberk@gmail.com
#
#  __    __  ____  _      _          _____  ____  _     ______    ___  ____
# |  |__|  ||    || |    | |        |     ||    || |   |      |  /  _]|    \
# |  |  |  | |  | | |    | |        |   __| |  | | |   |      | /  [_ |  D  )
# |  |  |  | |  | | |___ | |___     |  |_   |  | | |___|_|  |_||    _]|    /
# |  `  '  | |  | |     ||     |    |   _]  |  | |     | |  |  |   [_ |    \
#  \      /  |  | |     ||     |    |  |    |  | |     | |  |  |     ||  .  \
#   \_/\_/  |____||_____||_____|    |__|   |____||_____| |__|  |_____||__|\_|
#
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#++

#############################################################################
# will_filter configuration
#
# Default settings for all environments
# 
# You can overload any feature for any environment by changing the 
# environment settings at the bottom of the file. 
#
# Alternatively, you can overload any of the methods of WillFilter::Config
#############################################################################

defaults: &defaults

  ###########################################################################
  # 
  # require_filter_extension makes the filter into an abstract class
  # and will require you to subclass it in order for the filter to be 
  # serializeable. The following will no longer work:
  #
  # @users = User.filter(:params => params) 
  #
  # Use your own filter class instead:
  # 
  # @users = User.filter(:params => params, :filter => UserFilter) 
  # 
  # In the subclass you must provide the model name to be filtered by overloading:
  #
  #  def model_class
  #    User     
  #  end
  # 
  ###########################################################################

  require_filter_extensions: false   
  
  ###########################################################################
  # If you would like to see some JavaScript effects
  # provide your own effects class and implement required methods
  ###########################################################################

  effects_options:
    enabled:              false
    script_path:          "will_filter/filter_prototype_effects.js"
    
  save_options: 
    enabled:                  true
    user_filters_enabled:     false   # if set to true, the filters will be private
    user_class_name:          User
    current_user_method:      current_user
    project_filters_enabled:  false   # if set to true, the filters will be project based
    project_class_name:       Project
    current_project_method:   current_project

  export_options:         
    enabled:              true
    default_formats:      [html, csv, xml, json]
  
  containers:             # container implementation mapping
    nil:                  WillFilter::Containers::Nil
    numeric:              WillFilter::Containers::Numeric
    numeric_range:        WillFilter::Containers::NumericRange
    numeric_delimited:    WillFilter::Containers::NumericDelimited
    double:               WillFilter::Containers::Double
    double_range:         WillFilter::Containers::DoubleRange
    double_delimited:     WillFilter::Containers::DoubleDelimited
    date_time_range:      WillFilter::Containers::DateTimeRange
    single_date:          WillFilter::Containers::SingleDate
    date:                 WillFilter::Containers::Date
    date_time:            WillFilter::Containers::DateTime
    date_range:           WillFilter::Containers::DateRange
    text:                 WillFilter::Containers::Text
    text_delimited:       WillFilter::Containers::TextDelimited
    boolean:              WillFilter::Containers::Boolean
    list:                 WillFilter::Containers::List
    filter_list:          WillFilter::Containers::FilterList
    
  data_types:             # mapping between data types and containers   
    bigint:               [nil, numeric, numeric_range, numeric_delimited]
    numeric:              [nil, numeric, numeric_range, numeric_delimited]
    smallint:             [nil, numeric, numeric_range, numeric_delimited]
    integer:              [nil, numeric, numeric_range, numeric_delimited]
    int:                  [nil, numeric, numeric_range, numeric_delimited]
    float:                [nil, double, double_range, double_delimited]
    double:               [nil, double, double_range, double_delimited]
    timestamp:            [nil, date_time, date_time_range, single_date]
    datetime:             [nil, date_time, date_time_range, single_date]
    date:                 [nil, date, date_range]
    char:                 [nil, text, text_delimited]
    character:            [nil, text, text_delimited]
    varchar:              [nil, text, text_delimited]
    text:                 [nil, text, text_delimited]
    text[]:               [nil, text, text_delimited]
    bytea:                [nil, text, text_delimited]
    boolean:              [nil, boolean]
    tinyint:              [nil, boolean]

  operators:              # operators precedence
    is:                   100
    is_not:               200
    is_on:                300
    is_in:                400
    is_not_in:            450
    is_provided:          500
    is_not_provided:      600 
    is_after:             700
    is_before:            800
    is_in_the_range:      900
    contains:             1000
    does_not_contain:     1100
    starts_with:          1200
    ends_with:            1300
    is_greater_than:      1400
    is_less_than:         1500
    is_filtered_by:       1600
    
    
#############################################################################
# Environment Settings
# You can overload any feature defined in the defaults for any environment
#############################################################################
development:
  <<: *defaults
  
test:
  <<: *defaults
      
qa:
  <<: *defaults

stage:
  <<: *defaults

production:
  <<: *defaults
